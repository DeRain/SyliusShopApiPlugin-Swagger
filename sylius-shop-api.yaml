paths:
    /carts/{token}:
        parameters:
        - name: "token"
          in: "path"
          description: "Cart identifier."
          required: true
          type: "string"
        post:
            tags:
            - "cart"
            summary: "Pick up your cart from the store"
            description: "This endpoint will allow you to assign a new cart to the provided token. We recommend using UUID as a token to avoid duplication. If any of previous carts or orders already have the same token value an exception will be thrown."
            operationId: "cartPickUp"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - in: "body"
              name: "content"
              description: "Contains an information about the channel which should be associated with the newly created cart"
              required: true
              schema:
                $ref: "#/definitions/PickupCartRequest"
            responses:
                201:
                    description: "Cart has been picked up and assigned to given token"
                400:
                    description: "Invalid input"
                    schema:
                        $ref: "#/definitions/GeneralError"
        get:
            tags:
            - "cart"
            summary: "Show summarized cart."
            description: "This endpoint shows you the current calculated state of cart."
            operationId: "cartSummarize"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            responses:
                200:
                    description: "Current state of the cart, with calculated prices and related items."
                    schema:
                        $ref: "#/definitions/Cart"
                400:
                    description: "Invalid input (E.g. token has not been found)"
                    schema:
                        $ref: "#/definitions/GeneralError"
        delete:
            tags:
            - "cart"
            summary: "Drop your cart."
            description: "This endpoint will remove the cart and all of the related cart items."
            operationId: "cartDrop"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            responses:
                204:
                    description: "Cart has been dropped."
                400:
                    description: "Invalid input (E.g. token has not been found)"
                    schema:
                        $ref: "#/definitions/GeneralError"
    /carts/{token}/items:
        parameters:
        - name: "token"
          in: "path"
          description: "Cart identifier."
          required: true
          type: "string"
        post:
            tags:
            - "cart"
            summary: "Add an item to your cart."
            description: "This endpoint will allow you to add a new item to your cart."
            operationId: "cartPutItem"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - in: "body"
              name: "content"
              description: "Description of an item. The smallest required amount of data is a product code and quantity for a simple product. Configurable products will require an additional `variant_code` or `options` field, but never both."
              required: true
              schema:
                $ref: "#/definitions/PutItemToCartRequest"
            responses:
                201:
                    description: "Item has been added to the cart"
                    schema:
                        $ref: "#/definitions/Cart"
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
    /carts/{token}/multiple-items:
        parameters:
        - name: "token"
          in: "path"
          description: "Cart identifier."
          required: true
          type: "string"
        post:
            tags:
            - "cart"
            summary: "Add multiple items to your cart."
            description: "This endpoint will allow you to add a new item to your cart."
            operationId: "cartPutItems"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - in: "body"
              name: "content"
              description: "Description of items. The same rules applied to each of the array values as to the previous point."
              required: true
              schema:
                $ref: "#/definitions/PutItemsToCartRequest"
            responses:
                201:
                    description: "Item has been added to the cart"
                    schema:
                        $ref: "#/definitions/Cart"
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
    /carts/{token}/items/{identifier}:
        parameters:
        - name: "token"
          in: "path"
          description: "Cart identifier."
          required: true
          type: "string"
        - name: "identifier"
          in: "path"
          description: "Identifier of a specific item. Can be found in the cart summary."
          required: true
          type: "string"
        put:
            tags:
            - "cart"
            summary: "Change quantity of a cart item."
            operationId: "cartPutItem"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - in: "body"
              name: "content"
              required: true
              schema:
                $ref: "#/definitions/ChangeItemQuantityRequest"
            responses:
                204:
                    description: "Quantity has been changed."
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
        delete:
            tags:
            - "cart"
            summary: "Remove cart item."
            description: "This endpoint will remove one item from your cart"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            responses:
                204:
                    description: "Cart item has been removed."
                400:
                    description: "Invalid input (E.g. token has not been found)"
                    schema:
                        $ref: "#/definitions/GeneralError"
    /carts/{token}/coupon:
        parameters:
        - name: "token"
          in: "path"
          description: "Cart identifier."
          required: true
          type: "string"
        put:
            tags:
            - "cart"
            summary: "Add a promotion coupon code to the cart."
            description: "This endpoint will allow you to add a promotion coupon code to the cart and receive the discount."
            operationId: "cartAddCoupon"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - in: "body"
              name: "content"
              required: true
              schema:
                  $ref: "#/definitions/AddCouponRequest"
            responses:
                204:
                    description: "Coupon has been assigned to the cart."
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
        delete:
            tags:
            - "cart"
            summary: "Remove a promotion coupon code from the cart."
            description: "This endpoint will allow you to remove a promotion coupon code from the cart."
            operationId: "cartRemoveCoupon"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            responses:
                204:
                    description: "Coupon has been removed from the cart."
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
    /checkout/{token}:
        get:
            tags:
            - "checkout"
            summary: "Show checkout summary"
            description: "This endpoint will show the summarized cart during checkout. This action is an equivalent of cart summarize action."
            operationId: "checkoutSummarize"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "token"
              in: "path"
              description: "Cart identifier."
              required: true
              type: "string"
            responses:
                200:
                    description: "Current state of the cart, with calculated prices and related items."
                    schema:
                        $ref: "#/definitions/Cart"
                400:
                    description: "Invalid input (E.g. token has not been found)"
                    schema:
                        $ref: "#/definitions/GeneralError"
    /checkout/{token}/address:
        put:
            tags:
            - "checkout"
            summary: "Address cart."
            description: "This endpoint will allow you to add billing and shipping addresses to the cart and begin the checkout process. You can either define the same shipping and billing address or specify them separately."
            operationId: "checkoutAddress"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "token"
              in: "path"
              description: "Cart identifier."
              required: true
              type: "string"
            - in: "body"
              name: "content"
              required: true
              schema:
                  $ref: "#/definitions/CheckoutAddressRequest"
            responses:
                204:
                    description: "Cart has been addressed."
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
    /checkout/{token}/shipping/:
        get:
            tags:
            - "checkout"
            summary: "Get available shipping methods."
            description: "This endpoint will show you available shipping methods for all cart shipments."
            operationId: "checkoutShowAvailableShippingMethods"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "token"
              in: "path"
              description: "Cart identifier."
              required: true
              type: "string"
            responses:
                200:
                    schema:
                        $ref: "#/definitions/AvailableShippingMethods"
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
    /checkout/{token}/shipping/{id}:
        put:
            tags:
            - "checkout"
            summary: "Choosing a cart shipping method."
            description: "This endpoint will allow you to choose a cart shipping method."
            operationId: "checkoutChooseShippingMethod"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "token"
              in: "path"
              description: "Cart identifier."
              required: true
              type: "string"
            - name: "id"
              in: "path"
              description: "Order number of shipment for which shipping method should be specified."
              required: true
              type: "string"
            - in: "body"
              name: "content"
              required: true
              schema:
                  $ref: "#/definitions/CheckoutChooseShippingMethodRequest"
            responses:
                204:
                    description: "Shipping method has been chosen."
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
    /checkout/{token}/payment/:
        get:
            tags:
            - "checkout"
            summary: "Get available payment methods."
            description: "This endpoint will show you available payment methods for all cart payments."
            operationId: "checkoutShowAvailablePaymentMethods"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "token"
              in: "path"
              description: "Cart identifier."
              required: true
              type: "string"
            responses:
                200:
                    schema:
                        $ref: "#/definitions/AvailablePaymentMethods"
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
    /checkout/{token}/payment/{id}:
        put:
            tags:
            - "checkout"
            summary: "Choosing cart payment method."
            description: "This endpoint will allow you to choose cart a payment method."
            operationId: "checkoutChoosePaymentMethod"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "token"
              in: "path"
              description: "Cart identifier."
              required: true
              type: "string"
            - name: "id"
              in: "path"
              description: "Order number of payment for which payment method should be specified."
              required: true
              type: "string"
            - in: "body"
              name: "content"
              required: true
              schema:
                  $ref: "#/definitions/CheckoutChoosePaymentMethodRequest"
            responses:
                204:
                    description: "Payment method has been chosen."
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
    /checkout/{token}/complete:
        put:
            tags:
            - "checkout"
            summary: "Completing checkout."
            description: "This endpoint will allow you to complete the checkout."
            operationId: "checkoutComplete"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "token"
              in: "path"
              description: "Cart identifier."
              required: true
              type: "string"
            - in: "body"
              name: "content"
              required: true
              schema:
                  $ref: "#/definitions/CheckoutCompleteRequest"
            responses:
                204:
                    description: "Checkout has been completed."
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
    /taxon-products-by-slug/{slug}: #todo do
        get:
            tags:
            - "products"
            summary: "Show product catalog."
            description: "This endpoint will return a paginated list of products for given taxon."
            operationId: "productCatalog"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "slug"
              in: "path"
              description: "Slug of taxonomy for which products should be listed."
              required: true
              type: "string"
              example: "categories/t-shirts"
            - name: "channel"
              in: "query"
              description: "Channel from which products should be gathered."
              required: true
              type: "string"
              example: "en_GB"
            - name: "locale"
              in: "query"
              description: "Locale in which products should be shown."
              required: false
              type: "string"
              example: "en_GB"
            - name: "limit"
              in: "query"
              description: "Number of expected products per page."
              required: false
              type: "integer"
              example: 5
            - name: "page"
              in: "query"
              description: "Page number."
              required: false
              type: "integer"
              example: 2
            responses:
                200:
                    description: "Paginated product list."
                    schema:
                        type: "object"
                        $ref: "#/definitions/ProductsPage"
    /taxon-products/{code}:
        get:
            tags:
            - "products"
            summary: "Show product catalog."
            description: "This endpoint will return a paginated list of products for given taxon."
            operationId: "productCatalog"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "code"
              in: "path"
              description: "Code of taxonomy for which products should be listed."
              required: true
              type: "string"
              example: "T_SHIRT_TAXONOMY_CODE"
            - name: "channel"
              in: "query"
              description: "Channel code from which products should be gathered."
              required: true
              type: "string"
              example: "WEB_UK"
            - name: "locale"
              in: "query"
              description: "Locale in which products should be shown."
              required: false
              type: "string"
              example: "en_GB"
            - name: "limit"
              in: "query"
              description: "Number of expected products per page."
              required: false
              type: "integer"
              example: 5
            - name: "page"
              in: "query"
              description: "Page number."
              required: false
              type: "integer"
              example: 2
            responses:
                200:
                    description: "Paginated product list."
                    schema:
                        type: "object"
                        $ref: "#/definitions/ProductsPage"
    /products-by-slug/{slug}:
        get:
            tags:
            - "products"
            summary: "Show a product with the given slug."
            description: "This endpoint will return a product with the given slug."
            operationId: "productDetails"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "slug"
              in: "path"
              description: "Slug of expected product."
              required: true
              type: "string"
              example: "king-arthurs-mug"
            - name: "channel"
              in: "query"
              description: "Channel from which products should be gathered."
              required: true
              type: "string"
              example: "en_GB"
            - name: "locale"
              in: "query"
              description: "Locale in which products should be shown."
              required: false
              type: "string"
              example: "en_GB"
            responses:
                200:
                    schema:
                        type: "object"
                        $ref: "#/definitions/ProductDetails"
    /products/{code}:
        get:
            tags:
            - "products"
            summary: "Show a product with the given code."
            description: "This endpoint will return a product with the given code."
            operationId: "productDetails"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "code"
              in: "path"
              description: "Code of expected product."
              required: true
              type: "string"
              example: "AWESOME_KING_ARTHURS_MUG"
            - name: "channel"
              in: "query"
              description: "Channel from which products should be gathered."
              required: true
              type: "string"
              example: "en_GB"
            - name: "locale"
              in: "query"
              description: "Locale in which products should be shown."
              required: false
              type: "string"
              example: "en_GB"
            responses:
                200:
                    schema:
                        type: "object"
                        $ref: "#/definitions/ProductDetails"
    /product-reviews-by-slug/{slug}:
        parameters:
        - name: "slug"
          in: "path"
          description: "Slug of expected product."
          required: true
          type: "string"
          example: "king-arthurs-mug"
        post:
            tags:
            - "products"
            summary: "Add a review to the product."
            description: "This endpoint will allow you to add a new review to the product. Remember, that it should be accepted by an administrator before it will be available in the review list."
            operationId: "productAddReview"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - in: "body"
              name: "content"
              required: true
              schema:
                  $ref: "#/definitions/AddReviewRequest"
            responses:
                201:
                    description: "Review has been added to the product."
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
        get:
            tags:
            - "products"
            summary: "Show reviews."
            description: "This endpoint will return a paginated list of all reviews related to the product identified by slug."
            operationId: "productReviews"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "channel"
              in: "query"
              description: "Channel from which products should be gathered."
              required: true
              type: "string"
              example: "en_GB"
            responses:
                200:
                    schema:
                        type: "object"
                        $ref: "#/definitions/ProductReviewsPage"
    /product/{code}/reviews:
        parameters:
        - name: "code"
          in: "path"
          description: "Code of expected product."
          required: true
          type: "string"
          example: "AWESOME_KING_ARTHURS_MUG"
        post:
            tags:
            - "products"
            summary: "Add a review to the product."
            description: "This endpoint will allow you to add a new review to the product. Remember, that it should be accepted by an administrator before it will be available in the review list."
            operationId: "productAddReview"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - in: "body"
              name: "content"
              required: true
              schema:
                  $ref: "#/definitions/AddReviewRequest"
            responses:
                201:
                    description: "Review has been added to the product."
                400:
                    description: "Invalid input, validation failed."
                    schema:
                        $ref: "#/definitions/GeneralError"
        get:
            tags:
            - "products"
            summary: "Show reviews."
            description: "This endpoint will return a paginated list of all reviews related to the product identified by slug."
            operationId: "productReviews"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "channel"
              in: "query"
              description: "Channel from which products should be gathered."
              required: true
              type: "string"
              example: "en_GB"
            responses:
                200:
                    schema:
                        type: "object"
                        $ref: "#/definitions/ProductReviewsPage"
    /taxons:
        get:
            tags:
            - "taxons"
            summary: "Show taxon tree."
            description: "This endpoint will return an array of all available taxon roots with all of its children."
            operationId: "taxonTree"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "locale"
              in: "query"
              description: "Locale in which taxons should be shown."
              required: false
              type: "string"
              example: "en_GB"
            responses:
                200:
                    description: "Array of all available taxons."
                    schema:
                        type: "array"
                        items:
                            type: "object"
                            $ref: "#/definitions/Taxon"
    /taxons/{code}:
        get:
            tags:
            - "taxons"
            summary: "Show taxon with given code."
            description: "This endpoint will return a taxon with given code, children and the root node with direct path to this taxon."
            operationId: "taxonDetails"
            consumes:
            - "application/json"
            produces:
            - "application/json"
            parameters:
            - name: "code"
              in: "path"
              description: "Code of expected taxon."
              required: true
              type: "string"
              example: "CATEGORIES_CODE"
            - name: "locale"
              in: "query"
              description: "Locale in which taxons should be shown."
              required: false
              type: "string"
              example: "en_GB"
            responses:
                200:
                    description: "Requested taxon with children."
                    schema:
                        type: "object"
                        $ref: "#/definitions/Taxon"
    /request-password-reset:
        put:
            tags:
            - "users"
            summary: "Request resetting password of user with passed email."
            description: "Email with reset password path will be sent to user. Default path for password resetting is `/password-reset/{token}`. To change it, you need to override template `@SyliusShopApi\\Email\\passwordReset.html.twig`."
            operationId: "requestPasswordReset"
            consumes:
            - "application/json"
            parameters:
            - name: "email"
              in: "body"
              description: "Email of user which want to reset password."
              required: true
              schema:
                $ref: "#/definitions/RequestPasswordResetting"
            responses:
              204:
                description: "Reset password request has been sent."
              500:
                description: "User with provided email has not been found."
    /me:
        get:
            tags:
            - "users"
            summary: "Provides currently logged in user details."
            operationId: "me"
            responses:
                200:
                    schema:
                        type: "object"
                        $ref: "#/definitions/LoggedInCustomerDetails"
                500:
                    description: "There is no currently logged in user."
